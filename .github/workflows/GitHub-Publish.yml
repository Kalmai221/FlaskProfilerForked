name: Publish Release and Upload Python Package

on:
  push:
  release:
    types: [published]

permissions:
  contents: read
  packages: write  # Ensure that the workflow has permission to publish packages

jobs:
  get_latest_release:
    runs-on: ubuntu-latest
    outputs:
      previous_tag: ${{ steps.get_previous_tag.outputs.previous_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Get latest release tag
        id: get_previous_tag
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest)

          # Extract the tag name from the response
          TAG_NAME=$(echo "$RESPONSE" | jq -r .tag_name)

          if [ "$TAG_NAME" == "null" ]; then
            echo "No previous tag found."
            echo "previous_tag=none" >> $GITHUB_ENV
            echo "previous_tag=none" >> $GITHUB_OUTPUT
          else
            echo "Latest tag: $TAG_NAME"
            echo "previous_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

  build_and_publish:
    runs-on: ubuntu-latest
    needs: get_latest_release
    steps:
      - uses: actions/checkout@v4

      - name: Check for PUBLISH commit message
        id: check_publish
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MESSAGE" != PUBLISH* ]]; then
            echo "Not a PUBLISH commit. Exiting."
            exit 1
          fi
          
          # Extract version from the commit message
          VERSION="${COMMIT_MESSAGE#PUBLISH }"  # Remove "PUBLISH " from the message
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Set the version as an environment variable

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Create Release
        id: create_release
        run: |
          TAG_NAME="${{ env.VERSION }}"  # Use the extracted version as the tag name
          PREVIOUS_TAG="${{ needs.get_latest_release.outputs.previous_tag }}"  # Get the previous release tag

          if [ "$PREVIOUS_TAG" == "none" ]; then
            BODY="## Release $TAG_NAME\n\nâœ¨ This is the first release of the package!\n\n"
          else
            BODY="## Release $TAG_NAME\n\nðŸ“¦ New features and improvements since version $PREVIOUS_TAG:\n\n- [View full changes](https://github.com/Kalmai221/flask-profiler/compare/$PREVIOUS_TAG...$TAG_NAME)\n"
          fi
          
          # Create release on GitHub
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"Release $TAG_NAME\",\"body\":\"$BODY\"}")

          # Check for errors in the response
          if [[ $(echo "$RESPONSE" | jq -r .id) == "null" ]]; then
            echo "Error creating release: $RESPONSE"
            exit 1
          fi
          echo "Release created: $RESPONSE"

      - name: Publish package
        run: |
          echo "Publishing package version $TAG_NAME to PyPI"
          python -m twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} --repository pypi
